/*
 * #%L
 * ImgLib2: a general-purpose, multidimensional image processing library.
 * %%
 * Copyright (C) 2009 - 2016 Tobias Pietzsch, Stephan Preibisch, Stephan Saalfeld,
 * John Bogovic, Albert Cardona, Barry DeZonia, Christian Dietz, Jan Funke,
 * Aivar Grislis, Jonathan Hale, Grant Harris, Stefan Helfrich, Mark Hiner,
 * Martin Horn, Steffen Jaensch, Lee Kamentsky, Larry Lindsey, Melissa Linkert,
 * Mark Longair, Brian Northan, Nick Perry, Curtis Rueden, Johannes Schindelin,
 * Jean-Yves Tinevez and Michael Zinsmaier.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imglib2.realtransform;

import net.imglib2.RandomAccess;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealRandomAccessible;
import net.imglib2.interpolation.InterpolatorFactory;
import net.imglib2.util.Pair;
import net.imglib2.view.Views;

/**
 * Convenience factory methods for {@link RealRandomAccessible
 * RealRandomAccessibles} transformed in real coordinate space by
 * {@link InvertibleRealTransform InvertibleRealTransforms}.
 *
 * @author Stephan Saalfeld
 */
public class RealViewsExtension extends RealViews
{
	/**
	 * See a {@link RandomAccessibleInterval} as a {@link RandomAccessible}
	 * transformed by an {@link AffineGet}. The {@link AffineGet} is interpreted
	 * according to the natural understanding that the source is transformed by
	 * it. E.g. a positive translation of dimension <em>x</em> would shift the
	 * source to the right. Therefore, the samples need to be generated by the
	 * inverse of the {@link AffineGet}. This method replaces the passed
	 * {@link AffineGet} by the closest possible integer transform and a new
	 * {@link AffineGet} for its non-integer parts.  Changing the state of the
	 * {@link AffineGet} will therefore not change the state of any new
	 * {@link RandomAccess} generated by the view.
	 *
	 * @param source
	 *            the {@link RandomAccessible} to be transformed
	 * @param transformFromSource
	 *            the {@link InvertibleRealTransform} transforming source
	 *            coordinates to coordinates of the returned
	 *            {@link RealRandomAccessible}
	 * @param interpolatorFactory
	 * @param <T> the type
	 *
	 * @return {@link RandomAccessible} representing the transformed
	 *         source
	 */
	public static < T > AffineRealRandomAccessible< T, AffineGet > affineReal(
			final RandomAccessible< T > source,
			final AffineGet transformFromSource,
			final InterpolatorFactory< T, RandomAccessible< T > > interpolatorFactory)
	{
		final Pair<AffineTransform, LongAffineTransform> decomposedInverse = LongAffineTransform.decomposeRealLong( transformFromSource.inverse() );
		final LongAffineRandomAccessible< T > integerTransformed = new LongAffineRandomAccessible<>( source, decomposedInverse.getB() );

		return new AffineRealRandomAccessible<>(
				Views.interpolate(
						integerTransformed,
						interpolatorFactory ),
				decomposedInverse.getA() );
	}

	/**
	 * See a {@link RandomAccessibleInterval} as a {@link RandomAccessible}
	 * transformed by an {@link AffineGet}. The {@link AffineGet} is interpreted
	 * according to the natural understanding that the source is transformed by
	 * it. E.g. a positive translation of dimension <em>x</em> would shift the
	 * source to the right. Therefore, the samples need to be generated by the
	 * inverse of the {@link AffineGet}. This method replaces the passed
	 * {@link AffineGet} by the closest possible integer transform and a new
	 * {@link AffineGet} for its non-integer parts.  Changing the state of the
	 * {@link AffineGet} will therefore not change the state of any new
	 * {@link RandomAccess} generated by the view.
	 *
	 * @param source
	 *            the {@link RandomAccessible} to be transformed
	 * @param transformFromSource
	 *            the {@link InvertibleRealTransform} transforming source
	 *            coordinates to coordinates of the returned
	 *            {@link RealRandomAccessible}
	 * @param interpolatorFactory
	 * @param <T> the type
	 *
	 * @return {@link RandomAccessible} representing the transformed
	 *         source
	 */
	public static < T > AffineRandomAccessible< T, AffineGet > affine(
			final RandomAccessible< T > source,
			final AffineGet transformFromSource,
			final InterpolatorFactory< T, RandomAccessible< T > > interpolatorFactory)
	{
		final Pair<AffineTransform, LongAffineTransform> decomposedInverse = LongAffineTransform.decomposeRealLong( transformFromSource.inverse() );
		final LongAffineRandomAccessible< T > integerTransformed = new LongAffineRandomAccessible<>( source, decomposedInverse.getB() );

		return new AffineRandomAccessible<>(
				Views.interpolate(
						integerTransformed,
						interpolatorFactory ),
				decomposedInverse.getA() );
	}
}
